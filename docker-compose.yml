version: "3.4"

services:

  app:
    image: otus-microservice-architecture-app
    container_name: otus-microservice-architecture-app
    build:
      context: .
      target: app
      args:
        - GOLANG_VERSION
    ports:
      - "8000:${PORT}"
    depends_on:
      - db
    env_file:
      - .env
    volumes:
      - "./:/app"
    working_dir: "/app"
    command: ["application"]
    restart: unless-stopped
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:${PORT}/health || exit 1
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s
    profiles:
      - app
    networks:
      otus-microservice-architecture:
        aliases:
          - app

  db:
    container_name: otus-microservice-architecture-db
    image: postgres:15.2
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - TZ=UTC
    restart: unless-stopped
    healthcheck:
      test: pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER} -h localhost || exit 1
      interval: 5s
      start_period: 1m
    profiles:
      - app
      - dependencies
    networks:
      otus-microservice-architecture:
        aliases:
          - db

  migrate:
    container_name: otus-microservice-architecture-migrate
    image: "migrate/migrate:v4.13.0"
    depends_on:
      - db
    restart: on-failure
    volumes:
      - "./migrations:/migrations"
    profiles:
      - app
      - dependencies
    networks:
      otus-microservice-architecture:
        aliases:
          - migrate

networks:
  otus-microservice-architecture:
